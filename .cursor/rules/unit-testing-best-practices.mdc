---
description: 
globs: *.test.ts,*.test.tsx
alwaysApply: false
---
# Unit Testing Best Practices

Enforces test code quality by promoting patterns like AAA (Arrange-Act-Assert), single assertion per test, 
clear naming, and other testing best practices.

<rule>
name: unit_testing_best_practices
description: Enforces best practices for unit tests including AAA pattern, single assertion, and clear naming

filters:
  # Match test files across different naming conventions
  - type: file_path
    pattern: "\\.(test|spec)\\.(ts|tsx|js|jsx)$"
  
  # Or files in test directories
  - type: file_path
    pattern: "(/tests?/|/__tests__/)"

actions:
  - type: suggest
    message: |
      ## Unit Testing Best Practices

      ### General Guidelines
      - ✅ One expectation per test (improves test clarity and failure diagnosis)
      - ✅ Follow AAA (Arrange-Act-Assert) pattern with clear separation
      - ✅ Descriptive test names that explain the expected behavior
      - ✅ Use the correct assertion method for type comparison
      - ✅ Avoid logic in tests (loops, conditionals)
      - ✅ Keep tests independent - no shared state
      - ✅ Test behavior, not implementation details
      - ❌ **NEVER** access private fields, methods, or implementation details in tests
      - ✅ Only test public interfaces and observable behavior
      
      ### AAA Pattern Example
      The Arrange-Act-Assert pattern provides a clear structure for tests. While following this pattern is recommended, you don't need to explicitly mark these sections with comments in your code.

      ```typescript
      it('should calculate total including tax', () => {
        // Setup test data
        const cart = new ShoppingCart();
        const item = new Product('test', 100);
        const taxRate = 0.1;
        
        // Execute the code under test
        cart.add(item);
        const total = cart.calculateTotal(taxRate);
        
        // Verify expected outcomes
        expect(total).toBe(110);
      });
      ```

      ### Single Assertion
      ❌ **AVOID**:
      ```typescript
      it('should validate user data', () => {
        const user = new User({name: 'Test', email: 'test@example.com'});
        expect(user.isValid()).toBe(true);
        expect(user.name).toBe('Test');
        expect(user.email).toBe('test@example.com');
      });
      ```

      Using a single assertion per test improves clarity, failure diagnosis, and makes tests more maintainable:

      - Tests clearly document a specific behavior
      - Test failures pinpoint exact issues without multiple potential causes
      - Test names can be more specific and descriptive
      - Refactoring is easier when behaviors are separated

      ✅ **BETTER**:
      ```typescript
      describe('User validation', () => {
        const user = new User({name: 'Test', email: 'test@example.com'});
        
        it('should be valid with correct data', () => {
          expect(user.isValid()).toBe(true);
        });
        
        it('should store the name correctly', () => {
          expect(user.name).toBe('Test');
        });
        
        it('should store the email correctly', () => {
          expect(user.email).toBe('test@example.com');
        });
      });
      ```

      ### Descriptive Naming
      ❌ **AVOID**: 
      ```typescript
      it('test user', () => {
        const result = validateUser(testUser);
        expect(result).toBe(true);
      });
      ```

      ✅ **BETTER**: 
      ```typescript
      it('should accept valid user with all required fields', () => {
        const testUser = createValidUserFixture();
        const result = validateUser(testUser);
        expect(result).toBe(true);
      });
      ```

      ### Test Against Public APIs, Not Implementation Details

      Accessing implementation details makes tests brittle and prone to breaking when internal code changes. 
      Using `@ts-expect-error` in tests is a **code smell** for several reasons:

      1. **Coupling to implementation**: Tests become tied to internal state that wasn't meant to be public
      2. **Circumventing type safety**: TypeScript's primary benefit is catching errors at compile time
      3. **Test isolation violations**: Good tests verify behavior through public interfaces
      4. **API design red flags**: Frequent need to access private members suggests your public API needs improvement

      ❌ **AVOID** accessing private fields or using `@ts-expect-error`:
      ```typescript
      it('should initialize correctly', () => {
        const source = new AsyncSource({ fetchStates: async () => ({}) });
        // @ts-expect-error accessing private property
        expect(source.states).toEqual({});
      });

      it('should store feature state correctly', () => {
        const source = new FeatureSource();
        source.setFeature('test', true);
        
        // @ts-expect-error accessing private state
        expect(source._featureMap.get('test')).toBe(true);
      });
      ```

      ✅ **BETTER** - test through public API:
      ```typescript
      it('should initialize correctly', () => {
        const source = new AsyncSource({ fetchStates: async () => ({ feature: true }) });
        
        await source.initialize();
        
        expect(source.getFeatureState('feature')).toBe(true);
      });
      ```

      ✅ **BETTER** - mock dependencies for isolation:
      ```typescript
      it('should refresh feature states', async () => {
        const mockStates = { feature1: true };
        const fetchStates = vi.fn().mockResolvedValue(mockStates);
        const source = new AsyncSource({ fetchStates });
        
        await source.refresh();
        
        expect(fetchStates).toHaveBeenCalledTimes(1);
        expect(source.getFeatureState('feature1')).toBe(true);
      });
      ```

      Rare legitimate uses of `@ts-expect-error` in tests are limited to:
      - Testing intentional type errors
      - Edge cases of dynamic behavior that can't be statically typed
      - Testing the type system itself

  - type: highlight
    pattern: "it\\(['\"][^'\"]+['\"],\\s*(?:[^{]|{[^}]*expect[^}]*expect)"
    message: "Multiple expects in a single test. Consider splitting into multiple focused tests."
    
  - type: highlight
    pattern: "it\\(['\"][^should][^'\"]*['\"]"
    message: "Consider using 'should' or 'when' in test names to clearly describe expected behavior."

  - type: highlight
    pattern: "\\s+expect\\([^)]+\\).\\w+\\([^)]+\\);\\s+[^/]*expect"
    message: "Multiple assertions without clear separation. Consider splitting into separate tests."

  - type: highlight
    pattern: "@ts-expect-error|@ts-ignore.*private|\\.(#\\w+|_\\w+)"
    message: "Accessing private fields or implementation details is forbidden. Tests should only verify the public API."

  - type: highlight
    pattern: "\\bexpect\\([^)]+\\._\\w+\\)"
    message: "Do not test private properties (prefixed with _). Tests should only target the public interface."

  - type: highlight
    pattern: "@ts-expect-error\\s+accessing\\s+private\\s+property"
    message: "This pattern explicitly violates test isolation principles. Refactor tests to use only public APIs."

examples:
  - input: |
      it('login test', () => {
        const user = login('user', 'pass');
        expect(user).not.toBeNull();
        expect(user.isAuthenticated).toBe(true);
        expect(user.roles).toContain('user');
      });
    output: |
      describe('user login', () => {
        const username = 'user';
        const password = 'pass';
        let user;
        
        beforeEach(() => {
          user = login(username, password);
        });
        
        it('should successfully authenticate the user', () => {
          expect(user.isAuthenticated).toBe(true);
        });
        
        it('should assign the basic user role', () => {
          expect(user.roles).toContain('user');
        });
        
        it('should return a valid user object', () => {
          expect(user).not.toBeNull();
        });
      });

  - input: |
      it('should initialize internal state', () => {
        const source = new DataSource();
        
        // BAD: Accessing private property
        // @ts-expect-error accessing private property
        expect(source._internalState).toEqual({});
      });
    output: |
      it('should initialize correctly', () => {
        const source = new DataSource();
        
        // Only test observable behavior through public methods
        expect(source.isInitialized()).toBe(true);
        expect(source.getData()).toEqual({});
      });

metadata:
  priority: high
  version: 1.0
</rule>